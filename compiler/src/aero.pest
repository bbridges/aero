Source = { SOI ~ Forms ~ EOI }

// Forms are all separated by spaces and can include a prefix and a postfix.
// Space separation allows prefixes and postfixes to not have ambiguity with
// infixes. Newlines or commas between forms are marked by a `Sep` element
// which can be used to separate expressions in a block when not immediately
// followed by an infix `Op`.
Forms = _{ Whitespace? ~ FormsInner? ~ Whitespace? }
FormsInner = _{ WrappedForm ~ ((Space | Sep) ~ WrappedForm)* }
WrappedForm = _{ Prefix? ~ Form ~ (Infix ~ Form)* ~ Postfix? }
Form = _{
  Int | Str |
  Label | Sym | GlobalPath | LocalPath | Ident | Discard |
  Parens | Bracks | Braces | Op
}

// The sign of an integer is attached directly instead of relying on a prefix
// operator. The magnitude of the max value of a signed integer is one less than
// the minimum, so you can't represent the minimum value with a prefix operator.
// Parsing the sign ahead of time avoids this problem.
Int = { (IntSignPos | IntSignNeg)? ~ IntSegment }
IntSignPos = @{ "+" }
IntSignNeg = @{ "-" }
IntSegment = @{ ASCII_DIGIT+ ~ ("_"? ~ ASCII_DIGIT+)* }

Str = { SingleStr }
SingleStr = _{ "\"" ~ StrSegment ~ "\"" }
StrSegment = @{ (!"\"" ~ ANY)* }

Label = { Name ~ ":" }
Sym = { "." ~ Name }
GlobalPath = { ("/" ~ Name)+ }
LocalPath = { Name ~ ("/" ~ Name)+ }
Ident = { Name }
Discard = @{ "_" ~ Name? }

Name = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "-")* }

Parens = { "(" ~ Forms ~ ")" }
Bracks = { "[" ~ Forms ~ "]" }
Braces = { "{" ~ Forms ~ "}" }

Op = { OpChar+ }
OpChar = _{
  "~" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "-" | "=" | "+" | "\\" |
  "|" | "<" | "." | ">" | "/" | "?"
}

Prefix = @{ Op ~ !(Whitespace | "," | EOI) }
Infix = @{ Op ~ !(Whitespace | "," | EOI) }
Postfix = @{ Op }
Sep = @{ Newline | Whitespace? ~ "," ~ Whitespace }

Whitespace = _{ Space | Newline }
Space = _{ (" " | "\t")+ }
Newline = _{
  Space? ~ ((";" ~ (!("\n" | "\r") ~ ANY)*)? ~ ("\n" | "\r\n" | "\r") ~ Space?)+
}
