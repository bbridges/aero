; !
void!
(dict str str)!

; !!

; ?
int?
(list float)?

; ??

; ~
(quote ~(var-name))
(quote ~[spliced-var-name])

; @
@(float 3)

; #
#(MyStruct field1: "value1")
#[1 2 3]
#{key: .value}

; $
; unused

; %
(% 15 10)  ; 5

; ^
(match "thing"
  ^existing-var 1
  _             2)

; &
(func something [borrowed-int &int] -> ...)
(& Proto1 Proto2)

; *
(func something [unique-int *int] -> ...)
(* 2 3)  ; 6

; **
(** 3 2)  ; 9

; -
-10
(- 10 1)  ; 9

; +
+10
(+ 10 1)  ; 11

; ++

; =
(do var = 1)

; \
\(a -> a)

; |
(| .one [.two int])
(| #(list 1 2 3)
 | enum/map \(a -> (* a 2)))

; ,
#{,existing-map key: .value}

; <
(< 1 2)  ; true

; <=
(<= 1 2)  ; true

; <-
; <<-

; >
(> 1 2)  ; false

; >=  
(>= 1 2)  ; false

; ->
; ->>

; /
(/ 4 2)  ; 2

; /=
(/= 1 2)  ; true

